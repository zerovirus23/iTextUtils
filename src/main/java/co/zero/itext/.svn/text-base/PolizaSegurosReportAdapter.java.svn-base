package com.aseguratefacil.web.report;

import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.text.ParseException;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;

import com.aseguratefacil.web.util.ReportUtil;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * Clase que dado un conjunto de parámetros, los asigna a un formulario predeterminado
 * para generar un reporte de la venta de un seguro 
 * @author Hernan
 */
public class PolizaSegurosReportAdapter extends PdfPageEventHelper{
	//Valores de las llaves que serán usadas para obtener la información
	public static final String KEY_ASEGURADORA_TOMADOR_CORREO = "asegTomadorCorreo";
	public static final String KEY_ASEGURADORA_NAME = "asegName";
	public static final String KEY_ASEGURADORA_NIT = "asegNit";
	public static final String KEY_ASEGURADORA_FECHA_EXPEDICION = "asegFechaExpedicion";
	public static final String KEY_ASEGURADORA_NUM_PROPUESTA = "asegNumPropuesta";
	public static final String KEY_ASEGURADORA_SUB_PRODUCTO = "asegSubProducto";
	public static final String KEY_ASEGURADORA_CERTIFICADO_DE = "asegCertificadoDe";
	public static final String KEY_ASEGURADORA_INTERMEDIARIO_NAME = "asegInterName";
	public static final String KEY_ASEGURADORA_INTERMEDIARIO_NIT = "asegInterNit";
	public static final String KEY_ASEGURADORA_INTERMEDIARIO_DIRECCION = "asegInterDir";
	public static final String KEY_ASEGURADORA_INTERMEDIARIO_TEL1 = "asegInterTel1";
	public static final String KEY_ASEGURADORA_INTERMEDIARIO_TEL2 = "asegInterTel2";
	public static final String KEY_ASEGURADORA_INTERMEDIARIO_CIUDAD = "asegInterCiudad";
	
	public static final String KEY_ASEGURADORA_TOMADOR_NAME = "asegTomadorName";
	public static final String KEY_ASEGURADORA_TOMADOR_NIT = "asegTomadorNit";
	public static final String KEY_ASEGURADORA_TOMADOR_DIRECCION = "asegTomadorDir";
	public static final String KEY_ASEGURADORA_TOMADOR_TEL1 = "asegTomadorTel1";
	public static final String KEY_ASEGURADORA_TOMADOR_TEL2 = "asegTomadorTel2";
	public static final String KEY_ASEGURADORA_TOMADOR_CIUDAD = "asegTomadorCiudad";
	
	public static final String KEY_ASEGURADO_TITULO = "compTitle";
	public static final String KEY_ASEGURADO1_NAME = "comp1Name";
	public static final String KEY_ASEGURADO1_ID = "comp1Id";
	public static final String KEY_ASEGURADO1_DIRECCION = "comp1Direccion";
	public static final String KEY_ASEGURADO1_TEL1 = "comp1Tel1";
	public static final String KEY_ASEGURADO1_TEL2 = "comp1Tel2";
	public static final String KEY_ASEGURADO1_CIUDAD = "comp1Ciudad";
	public static final String KEY_ASEGURADO2_NAME = "comp2Name";
	public static final String KEY_ASEGURADO2_ID = "comp2Id";
	public static final String KEY_ASEGURADO2_DIRECCION = "comp2Direccion";
	public static final String KEY_ASEGURADO2_TEL1 = "comp2Tel1";
	public static final String KEY_ASEGURADO2_TEL2 = "comp2Tel2";
	public static final String KEY_ASEGURADO2_CIUDAD = "comp2Ciudad";
	public static final String KEY_BENEFICIARIO = "beneficiario";
	public static final String KEY_BENEFICIARIO_ID = "beneId";
	public static final String KEY_BENEFICIARIO_NAME = "beneName";
	public static final String KEY_BENEFICIARIO_CIUDAD = "beneCiudad";
	public static final String KEY_BENEFICIARIO_DIRECCION = "beneDireccion";
	public static final String KEY_BENEFICIARIO_TELEFONO = "beneTelefono";
	public static final String KEY_POLIZA_TITUTLO = "polVigencia";
	public static final String KEY_POLIZA_INICIO = "polInicio";
	public static final String KEY_POLIZA_FIN = "polFin";
	
	public static final String KEY_RIESGO_TITULO = "riesgoTitle";
	public static final String KEY_RIESGO_BIEN = "riesgoBien";
	public static final String KEY_RIESGO_FASECOLDA = "riesgoFasecolda";
	public static final String KEY_RIESGO_INFO = "riesgoInfo";
	public static final String KEY_RIESGO_SERIE_CHASIS = "riesgoSerieChasis";
	public static final String KEY_RIESGO_MODELO = "riesgoModelo";
	public static final String KEY_RIESGO_CLASE = "riesgoClase";
	public static final String KEY_RIESGO_MARCA = "riesgoMarca";
	public static final String KEY_RIESGO_VALOR = "riesgoValor";
	public static final String KEY_RIESGO_TIPO = "riesgoTipo";
	public static final String KEY_RIESGO_PLACA = "riesgoPlaca";
	public static final String KEY_RIESGO_SERIE_MOTOR = "riesgoSerieMotor";
	public static final String KEY_RIESGO_FECHA_NAC = "riesgoFechaNac";
//	public static final String KEY_RIESGO_ONEROSO = "riesgoOneroso";
	public static final String KEY_RIESGO_COLOR = "riesgoColor";
//	public static final String KEY_RIESGO_TIENDA = "riesgoTienda";
	public static final String KEY_RIESGO_NUEVO = "riesgoNuevo";
	public static final String KEY_RIESGO_USO = "riesgoUso";
	public static final String KEY_RIESGO_RECLAMACION = "riesgoReclamacion";
	public static final String KEY_RIESGO_EDAD = "riesgoEdad";
	
	public static final String KEY_COBERTURA_TITULO = "coberturaTitle";
	public static final String KEY_COBERTURA_SUBTITLE = "coberturaSubtitle";
	public static final String KEY_COBERTURA_VALOR = "coberturaValor";
	public static final String KEY_COBERTURA_PRIMA = "coberturaPrima";
	public static final String KEY_COBERTURA_INFO = "coberturaInfo";
	public static final String KEY_COBERTURA_PRIMA_NETA = "coberturaPrimaNeta";
	public static final String KEY_COBERTURA_VALOR_ASEGURADO = "coberturaValorAsegurado";
	public static final String KEY_COBERTURA_VALOR_IVA = "coberturaValorIva";
	public static final String KEY_COBERTURA_FORMA_DE_PAGO = "coberturaFormaPago";
	public static final String KEY_COBERTURA_TOTAL_PRIMA = "coberturaTotalPrima";
	public static final String KEY_COBERTURA_TOTAL_CUOTAS = "coberturaTotalCuotas";
	
	public static final String KEY_COBERTURA_PLUS_INFO = "coberturaPlusInfo";
	public static final String KEY_COBERTURA_PLUS_TITLE = "coberturaPlusTitle";
	public static final String KEY_COBERTURA_PLUS_SUBTITLE = "coberturaPlusSubTitle";
	
	public static final String KEY_IMAGEN_ASEGURADORA = "aseguradoraLogo";
	public static final String KEY_IMAGEN_VIGILADO = "vigiladoLogo";
	public static final String KEY_TEXT = "text";
	public static final String KEY_FIRMA_EMPRESA = "firmaEmpresa";
	
	public static final String KEY_GENERAL_TITLE = "POLIZA SEGURO DE AUTOMOVILES";
	
	//Constantes utiles en la generación del reporte
	protected static final String REPORT_TITLE = "Poliza Seguros";
	protected static final String REPORT_AUTHOR = "AsegurateFacil";
	protected static final Color DEFAULT_TABLE_BORDER_COLOR = Color.decode("#6E6E6E");
	protected BaseColor defaultTableBorderBaseColor;

	protected static final int DEFAULT_SPACE_BETWEEN_TABLES = 5;
	
	protected Font font8BlackRegular = FontFactory.getFont("Times-Roman", 6f, Font.NORMAL);
	protected Font font8BlackBold = FontFactory.getFont("Times-Roman", 6f, Font.BOLD);
	protected Font fontGeneralTitle = FontFactory.getFont("Times-Roman", 12f, Font.BOLD);
	
	protected ReportUtil util = ReportUtil.getInstance();
	protected PdfWriter pdfWriter;
	protected Map<String, Object> parameters;
	
	/**
	 * Método que construye el reporte 
	 * @return
	 */
	public byte[] buildReport(Map<String, Object> parameters){
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		Document document = null;
		byte[] pdfDocumentAsBytes = null;
		
		try{
			this.defaultTableBorderBaseColor = new BaseColor(DEFAULT_TABLE_BORDER_COLOR.getRed(), 
					DEFAULT_TABLE_BORDER_COLOR.getGreen(), DEFAULT_TABLE_BORDER_COLOR.getBlue());
			this.parameters = parameters;
			document = configurePDF(os, REPORT_AUTHOR);
			pdfWriter.setPageEvent(this);
			document.open();
			
			addInfoToDocument(document);
			
			document.close();
			pdfDocumentAsBytes = os.toByteArray();
			os.close();
			return pdfDocumentAsBytes;
		} catch (Exception e) {
			e.printStackTrace();
			throw new IllegalStateException(e.getMessage());
		}
	}
	
	/**
	 * Método que realiza las configuraciones básicas para el documento PDF
	 * @param os Stream de datso donde se podría escribir el archivo pdf
	 * @return Documento PDF con las configuraciones básicas realizadas
	 * @throws FileNotFoundException
	 * @throws DocumentException
	 */
	protected Document configurePDF(OutputStream os, String author) throws FileNotFoundException, DocumentException{
		Document document = new Document(PageSize.LETTER);
		document.setMargins(30, 15, 70, 30);
		document.addTitle(REPORT_TITLE);
		document.addCreator(author);
		document.addAuthor(author);
		pdfWriter = PdfWriter.getInstance(document, os);
		return document;
	}
	
	/**
	 * Metodo que gestiona las partes que deben ser agregadas al pdf
	 * @param document Documento al que se agregarán los elementos del reporte
	 * @throws DocumentException Si se presenta un error al agregar un elemento al documento
	 * @throws IOException 
	 * @throws MalformedURLException 
	 * @throws ParseException 
	 */
	protected void addInfoToDocument(Document document) throws DocumentException, MalformedURLException, IOException, ParseException{
		document.newPage();
		buildInsuranceInfo(document);
		buildInsuredDivided(document);
		buildInsuredInfo(document);
		buildRiskInfo(document);
//		buildCoverageInfo(document);
		buildCoveragePlusInfo(document);
		buildTexts(document);
		buildSignature(document);
	}
	
	/**
	 * Método que construye la tabla inicial con la información de la aseguradora y el tomador
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildInsuranceInfo(Document document) throws DocumentException{
		PdfPTable insuranceTable = new PdfPTable(1);
		insuranceTable.setWidthPercentage(100);
		insuranceTable.setKeepTogether(true);
		insuranceTable.addCell(getInsuranceTable1());
		insuranceTable.addCell(getInsuranceTable2());
		insuranceTable.addCell(getInsuranceTable3());
		document.add(insuranceTable);
	}
	
	
	
	/**
	 * Método que construye la primera parte de la tabla con la información de la aseguradora
	 * @return Una tabla con la información de la aseguradora
	 */
	protected PdfPCell getInsuranceTable1(){
		PdfPTable table = new PdfPTable(new float[]{7, 10, 1, 5});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_NAME), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_NIT), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_NIT), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunta parte de la tabla con la información del producto
	 * @return Una tabla con la información del producto
	 */
	protected PdfPCell getInsuranceTable2(){
		PdfPTable table = new PdfPTable(new float[]{3,3,2,3,2,3,2.5f,3});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_FECHA_EXPEDICION), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_FECHA_EXPEDICION), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_NUM_PROPUESTA), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_NUM_PROPUESTA), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_SUB_PRODUCTO), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_SUB_PRODUCTO), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_CERTIFICADO_DE), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_CERTIFICADO_DE), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información de los tomadores
	 * @return Una tabla con la información de los tomadores
	 */
	protected PdfPCell getInsuranceTable3(){
		PdfPTable table = new PdfPTable(new float[]{1.9f,10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_INTERMEDIARIO_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_INTERMEDIARIO_NAME), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 * @throws DocumentException 
	 */
	protected void buildInsuredDivided(Document document) throws DocumentException{
		PdfPTable tableOutter = new PdfPTable(1);
		tableOutter.getDefaultCell().setBorder(1);
		tableOutter.setWidthPercentage(100);
		tableOutter.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		tableOutter.setSpacingAfter(DEFAULT_SPACE_BETWEEN_TABLES);
		
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_NAME), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_NIT), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_NIT), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_TEL2), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_TEL2), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_CIUDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_CIUDAD), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_DIRECCION), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_DIRECCION), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_CORREO), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_CORREO), table);
		table.completeRow();
		
		tableOutter.addCell(new PdfPCell(new Paragraph("DATOS DEL TOMADOR", font8BlackBold)));
		tableOutter.addCell(getTableAsCell(table));
		document.add(tableOutter);
	}
	
	/**
	 * Método que construye la tabla con la información del asegurado
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildInsuredInfo(Document document) throws DocumentException{
		PdfPTable insuredTable = new PdfPTable(1);
		insuredTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		insuredTable.setWidthPercentage(100);
		insuredTable.setKeepTogether(true);
		
		insuredTable.addCell(getInsuredTable1());
		insuredTable.addCell(getInsuredTable2());
		insuredTable.addCell(getInsuredTable3());
		document.add(insuredTable);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 */
	protected PdfPCell getInsuredTable1(){
		PdfPTable table = new PdfPTable(1);
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO_TITULO), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 */
	protected PdfPCell getInsuredTable2(){
		PdfPTable table = new PdfPTable(new float[]{6,18,5,6,5,6,4,7});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO1_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO1_NAME), table);
		
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO1_ID), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO1_ID), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO1_DIRECCION), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO1_DIRECCION), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO1_TEL1), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO1_TEL1), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO1_TEL2), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO1_TEL2), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO1_CIUDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO1_CIUDAD), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO2_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO2_NAME), table);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO2_ID), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO2_ID), table);
		
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO2_DIRECCION), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO2_DIRECCION), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO2_TEL1), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO2_TEL1), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO2_TEL2), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO2_TEL2), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADO2_CIUDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADO2_CIUDAD), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 */
	protected PdfPCell getInsuredTable3(){
		PdfPTable table = new PdfPTable(new float[]{5.7f,9.5f,5,5,11});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_BENEFICIARIO), table);
		addDefaultTextCell((String)parameters.get(KEY_BENEFICIARIO), table);
		addDefaultLabelCell(util.getMessage(KEY_BENEFICIARIO_ID), table);
		addDefaultTextCell((String)parameters.get(KEY_BENEFICIARIO_ID), table);
		
		PdfPCell vigenciaCell = getVigenciaTable();
		vigenciaCell.setRowspan(3);
		table.addCell(vigenciaCell);
		
		addDefaultLabelCell(util.getMessage(KEY_BENEFICIARIO_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_BENEFICIARIO_NAME), table);
		addDefaultLabelCell(util.getMessage(KEY_BENEFICIARIO_CIUDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_BENEFICIARIO_CIUDAD), table);
		addDefaultLabelCell(util.getMessage(KEY_BENEFICIARIO_DIRECCION), table);
		addDefaultTextCell((String)parameters.get(KEY_BENEFICIARIO_DIRECCION), table);
		addDefaultLabelCell(util.getMessage(KEY_BENEFICIARIO_TELEFONO), table);
		addDefaultTextCell((String)parameters.get(KEY_BENEFICIARIO_TELEFONO), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tabla correspondiente a la vigencia de la póliza
	 * @return Celda con la información de la vigencia
	 */
	protected PdfPCell getVigenciaTable(){
		PdfPTable table = new PdfPTable(2);
		PdfPCell cell = new PdfPCell(new Paragraph(util.getMessage(KEY_POLIZA_TITUTLO), font8BlackBold));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_POLIZA_INICIO), font8BlackBold));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_POLIZA_FIN), font8BlackBold));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_POLIZA_INICIO), font8BlackRegular));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_POLIZA_FIN), font8BlackRegular));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		return new PdfPCell(table);
	}
	
	/**
	 * Método que construye la tabla con la información del riesgo
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildRiskInfo(Document document) throws DocumentException{
		PdfPTable riskTable = new PdfPTable(1);
		riskTable.setWidthPercentage(100);
		riskTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		riskTable.setKeepTogether(true);
		riskTable.addCell(getRiskTableTitle(KEY_RIESGO_TITULO));
		riskTable.addCell(getRiskTable2());
		riskTable.addCell(getRiskTableTitle(KEY_RIESGO_INFO));
		riskTable.addCell(getRiskTable3());
		document.add(riskTable);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	protected PdfPCell getRiskTableTitle(String title){
		PdfPTable table = new PdfPTable(1);
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(title), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	protected PdfPCell getRiskTable2(){
		PdfPTable table = new PdfPTable(new float[]{5, 6.5f, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_BIEN), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_BIEN), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_FASECOLDA), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_FASECOLDA), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	protected PdfPCell getRiskTable3(){
		PdfPTable table = new PdfPTable(new float[]{5, 6.5f, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_SERIE_CHASIS), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_SERIE_CHASIS), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_MODELO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_MODELO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_CLASE), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_CLASE), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_MARCA), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_MARCA), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_VALOR), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_VALOR), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_TIPO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_TIPO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_PLACA), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_PLACA), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_SERIE_MOTOR), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_SERIE_MOTOR), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_FECHA_NAC), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_FECHA_NAC), table);
//		addDefaultLabelCell(util.getMessage(KEY_RIESGO_ONEROSO), table);
//		addDefaultTextCell((String)parameters.get(KEY_RIESGO_ONEROSO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_COLOR), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_COLOR), table);
//		addDefaultLabelCell(util.getMessage(KEY_RIESGO_TIENDA), table);
//		addDefaultTextCell((String)parameters.get(KEY_RIESGO_TIENDA), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_NUEVO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_NUEVO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_USO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_USO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_RECLAMACION), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_RECLAMACION), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_EDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_EDAD), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tabla con la información de la cobertura
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildCoverageInfo(Document document) throws DocumentException{
		PdfPTable coverageTable = new PdfPTable(1);
		coverageTable.setWidthPercentage(100);
		coverageTable.setKeepTogether(true);
		coverageTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		coverageTable.addCell(getCoverageTableTitle());
		coverageTable.addCell(getCoverageTableInfo());
		coverageTable.addCell(getCoverageTableInfo2());
		document.add(coverageTable);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del cubrimiento
	 * @return Una tabla con la información del riesgo
	 */
	protected PdfPCell getCoverageTableTitle(){
		PdfPTable table = new PdfPTable(new float[]{10,5,5});
		table.getDefaultCell().setBorder(1);
		PdfPCell cell = new PdfPCell(new Paragraph(util.getMessage(KEY_COBERTURA_TITULO), font8BlackBold));
		cell.setColspan(3); cell.setBorderWidth(0.5f); cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_COBERTURA_SUBTITLE), font8BlackBold));
		cell.setBorderWidth(0.5f); cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_COBERTURA_VALOR), font8BlackBold));
		cell.setBorderWidth(0.5f); cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_COBERTURA_PRIMA), font8BlackBold));
		cell.setBorderWidth(0.5f); cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que agrega la información dinámica de la cobertura de la póliza
	 * @return Celda con la información de la cobertura
	 */
	@SuppressWarnings("unchecked")
	protected PdfPCell getCoverageTableInfo(){
		PdfPTable table = new PdfPTable(new float[]{10,5,5});
		table.getDefaultCell().setBorder(1);
		
		List<String[]> coverageInfo = (List<String[]>)parameters.get(KEY_COBERTURA_INFO);
		
		for(String[] info : coverageInfo){
			addDefaultTextCell(info[0], table);
			addDefaultTextCell(info[1], table);
			addDefaultTextCell(info[2], table);
		}
		
		return getTableAsCell(table); 
	}
	
	/**
	 * Método que agrega la información adicional de la cobertura
	 * @return Celda con la información adicional de la cobertura
	 */
	protected PdfPCell getCoverageTableInfo2(){
		PdfPTable table = new PdfPTable(new float[]{10,5,10,5});
		table.getDefaultCell().setBorder(1);
		
		addLabelTextCellWithBorder(KEY_COBERTURA_PRIMA_NETA, table);
		addLabelTextCellWithBorder(KEY_COBERTURA_VALOR_ASEGURADO, table);
		addLabelTextCellWithBorder(KEY_COBERTURA_VALOR_IVA, table);
		addLabelTextCellWithBorder(KEY_COBERTURA_FORMA_DE_PAGO, table);
		addLabelTextCellWithBorder(KEY_COBERTURA_TOTAL_PRIMA, table);
		addLabelTextCellWithBorder(KEY_COBERTURA_TOTAL_CUOTAS, table);
		addLabelTextCellWithBorder(KEY_COBERTURA_TOTAL_CUOTAS, table);
		return getTableAsCell(table); 
	} 
	
	/**
	 * Método que construye la tabla con la información de la cobertura plus
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildCoveragePlusInfo(Document document) throws DocumentException{
		PdfPTable coverageTable = new PdfPTable(1);
		coverageTable.setWidthPercentage(100);
		coverageTable.setKeepTogether(true);
		coverageTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		coverageTable.addCell(getCoveragePlusTableTitle());
		coverageTable.addCell(getCoveragePlusTableInfo());
		coverageTable.addCell(getCoverageTableInfo2());
		document.add(coverageTable);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del cubrimiento plus
	 * @return Una tabla con la información del cubrimiento plus
	 */
	protected PdfPCell getCoveragePlusTableTitle(){
		PdfPTable table = new PdfPTable(new float[]{1});
		table.getDefaultCell().setBorder(1);
		PdfPCell cell = new PdfPCell(new Paragraph(util.getMessage(KEY_COBERTURA_PLUS_TITLE), font8BlackBold));
		cell.setBorderWidth(0.5f); cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_COBERTURA_PLUS_SUBTITLE), font8BlackBold));
		cell.setBorderWidth(0.5f); cell.setBorderColor(defaultTableBorderBaseColor);
		table.addCell(cell);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que agrega la información dinámica de la cobertura plus de la póliza
	 * @return Celda con la información de la cobertura plus
	 */
	@SuppressWarnings("unchecked")
	protected PdfPCell getCoveragePlusTableInfo(){
		PdfPTable table = new PdfPTable(new float[]{3,2});
		table.getDefaultCell().setBorder(1);
		
		Map<String, List<String[]>> coverageInfo = (Map<String, List<String[]>>)parameters.get(KEY_COBERTURA_PLUS_INFO);
		
		for(Entry<String, List<String[]>> entry : coverageInfo.entrySet()){
			addDefaultLabelCell(StringUtils.EMPTY, table);
			addDefaultLabelCell(StringUtils.EMPTY, table);
			addDefaultLabelCell(entry.getKey(), table);
			addDefaultLabelCell(StringUtils.EMPTY, table);
			
			for(String[] labels : entry.getValue()){
				addDefaultTextCell(labels[0], table);
				addDefaultTextCell(labels[1], table);
			}
		}
		
		return getTableAsCell(table); 
	}
	
	@SuppressWarnings("unchecked")
	protected void buildTexts(Document document) throws DocumentException{
		List<Object[]> textParameters = (List<Object[]>)parameters.get(KEY_TEXT);
		Paragraph paragraph;
		
		for(Object[] textInfo : textParameters){
			String title = (String)textInfo[0];
			String text = (String)textInfo[1];
			List<String> itemParameters = (List<String>)textInfo[2];
			
			if(!StringUtils.isBlank(title)){
				paragraph = new Paragraph(title, font8BlackBold);
				paragraph.setAlignment(Element.ALIGN_JUSTIFIED);
				document.add(paragraph);				
			}
			
			if(!StringUtils.isBlank(text)){
				paragraph = new Paragraph(text, font8BlackRegular);
				paragraph.setAlignment(Element.ALIGN_JUSTIFIED);
				document.add(paragraph);
			}
			
			if(itemParameters != null){
				com.itextpdf.text.List items = new com.itextpdf.text.List(true);
				
				for(String label : itemParameters){
					paragraph = new Paragraph(label, font8BlackRegular);
					paragraph.setAlignment(Element.ALIGN_JUSTIFIED);
					
					items.add(new ListItem(paragraph));
				}
				
				document.add(items);
			}
		}
	}
	
	protected void buildSignature(Document document) throws DocumentException, MalformedURLException, IOException{
		Image companySignature = Image.getInstance((byte[])parameters.get(KEY_FIRMA_EMPRESA));
		PdfPTable table = new PdfPTable(new float[]{10, 2});
		table.setWidthPercentage(90);
		table.getDefaultCell().setBorder(0);
		table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		table.addCell(StringUtils.EMPTY);
		table.addCell(companySignature);
		
		table.addCell(StringUtils.EMPTY);
		PdfPCell cell = new PdfPCell(new Paragraph(util.getMessage(KEY_FIRMA_EMPRESA), font8BlackBold));
		cell.setBorder(0);cell.setBorderWidthTop(0.25f);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		document.add(table);
	}
	
	/**
	 * Método que permite construir una celda de label de título básico
	 * @param label Texto que se desea agregar a la tabla
	 * @param table Tabla a la que será agregado el titulo
	 */
	protected void addDefaultLabelCell(String label, PdfPTable table){
		PdfPCell cell = new PdfPCell(new Paragraph(label, font8BlackBold));
		cell.setBorder(0);
		table.addCell(cell);
	}
	
	protected void addDefaultLabelCellWithBorder(String label, PdfPTable table){
		PdfPCell cell = new PdfPCell(new Paragraph(label, font8BlackBold));
		cell.setBorderWidth(0.25f);
		table.addCell(cell);
	}
	
	/**
	 * Método que permite agregar celdas con borde de la forma titulo valor a una tabla
	 * @param parameterKey Llave por la que se buscará el texto que se desea agregar
	 * @param table
	 */
	protected void addLabelTextCellWithBorder(String parameterKey, PdfPTable table){
		PdfPCell cell = new PdfPCell(new Paragraph(util.getMessage(parameterKey), font8BlackBold));
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor); table.addCell(cell);
		cell = new PdfPCell(new Paragraph((String)parameters.get(parameterKey), font8BlackRegular));
		cell.setBorderWidth(0.5f);cell.setBorderColor(defaultTableBorderBaseColor); table.addCell(cell);
	}
	
	/**
	 * Método que permite construir una celda de texto básico
	 * @param label Texto que se desea agregar a la tabla
	 * @param table Tabla a la que será agregado el titulo
	 */
	protected void addDefaultTextCell(String label, PdfPTable table){
		PdfPCell cell = new PdfPCell(new Paragraph(label, font8BlackRegular));
		cell.setBorder(0);
		table.addCell(cell);
	}
	
	/**
	 * Método que encapsula una tabla dentro de una celda, generalmente para ser anidada dentro de otra tabla
	 * @param table Tabla que se desea anidar
	 * @param borderWidth Ancho del borde de la celda que encapsulará a la tabla
	 * @return Celda con la información de la tabla
	 */
	protected PdfPCell getTableAsCell(PdfPTable table){
		PdfPCell cell = new PdfPCell(table);
		cell.setBorderWidth(0.5f);
		cell.setBorderColor(defaultTableBorderBaseColor);
		return cell;
	}
	
	/**
	 * Método que retorna el título general del encabezado
	 * @return Cadena con el titulo del archivo
	 */
	protected String getGeneralTitle(){
		return KEY_GENERAL_TITLE;
	}
	
	/* (non-Javadoc)
	 * @see com.lowagie.text.pdf.PdfPageEvent#onEndPage(com.lowagie.text.pdf.PdfWriter, com.lowagie.text.Document)
	 */
	@Override
	public void onEndPage(PdfWriter writer, Document document) {
		try {
			float factor1 = 0.2f, factor2 = 0.09f;
			PdfContentByte cu = writer.getDirectContentUnder();
			Image companyImage = Image.getInstance((byte[])parameters.get(KEY_IMAGEN_ASEGURADORA));
			Image vigiladoImage = Image.getInstance((byte[])parameters.get(KEY_IMAGEN_VIGILADO));
			companyImage.scalePercent(0.1f);
			
			PdfPTable table = new PdfPTable(1);
			table.setWidthPercentage(100);
			table.setTotalWidth(570);
			table.getDefaultCell().setBorder(0);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(new Paragraph(getGeneralTitle(), fontGeneralTitle));
			table.completeRow();
			table.writeSelectedRows(0, table.getRows().size(), 20, 770, cu);
			cu.addImage(companyImage, companyImage.getWidth() * factor1, 0, 0, companyImage.getHeight() * factor1, 20, 730);
			cu.addImage(vigiladoImage, vigiladoImage.getWidth() * factor2, 0, 0, vigiladoImage.getHeight() * factor2, 5, 100);
		} catch (BadElementException e) {
			e.printStackTrace();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
	}
}
package com.aseguratefacil.web.report;

import java.io.IOException;
import java.net.MalformedURLException;
import java.text.ParseException;

import org.apache.commons.lang.StringUtils;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;


/**
 * Clase que dado un conjunto de parámetros, los asigna a un formulario predeterminado
 * para generar un reporte de la venta de un seguro 
 * @author Hernan
 */
public class SolicitudSegurosReportAdapter extends PolizaSegurosReportAdapter{
	//Valores de las llaves que serán usadas para obtener la información
	public static final String KEY_S_ASEGURADO_NAME = "s_compName";
	public static final String KEY_S_ASEGURADO_TIPO_DOCUMENT = "s_compTipoDocumento";
	public static final String KEY_S_ASEGURADO_NUM_DOCUMENTO = "s_compNumDocumento";
	public static final String KEY_S_ASEGURADO_SEXO = "s_compSexo";
	public static final String KEY_S_ASEGURADO_ESTADO_CIVIL = "s_compEstadoCivil";
	public static final String KEY_S_ASEGURADO_DIRECCION = "s_compDireccion";
	public static final String KEY_S_ASEGURADO_TELEFONO1 = "s_compTelefono1";
	public static final String KEY_S_ASEGURADO_CIUDAD = "s_compCiudad";
	public static final String KEY_S_ASEGURADO_TELEFONO2 = "s_compTelefono2";
	
	public static final String KEY_ASEGURADORA_TOMADOR_TITLE = "asegTomadorTitle";
	
	public static final String KEY_S_ASEGURADO_FECHA_NACIMIENTO = "s_compFechaNacimiento";
	public static final String KEY_S_ASEGURADO_LUGAR_NACIMIENTO = "s_compLugarNacimiento";
	public static final String KEY_S_ASEGURADO_NACIONALIDAD = "s_compNacionalidad";
	public static final String KEY_S_ASEGURADO_EDAD = "s_compEdad";
	public static final String KEY_S_ASEGURADO_EMAIL = "s_compEmail";
	public static final String KEY_S_ASEGURADO_ACTIVIDAD_ECONOMICA = "s_compActividadEconomica";
	public static final String KEY_S_ASEGURADO_PROFESION = "s_compProfesion";
	public static final String KEY_S_ASEGURADO_NOMBRE_EMPRESA = "s_compNombreEmpresa";
	public static final String KEY_S_ASEGURADO_OCUPACION = "s_compOcupacion";
	public static final String KEY_S_ASEGURADO_DIRECCION_EMPRESA = "s_compDireccionEmpresa";
	public static final String KEY_S_ASEGURADO_DEFINIR_CARGO = "s_compDefinirCargo";
	public static final String KEY_S_ASEGURADO_CIUDAD_CARGO = "s_compCiudadCargo";
	public static final String KEY_S_ASEGURADO_TELEFONO_CARGO = "s_compTelefonoCargo";
	
	public static final String KEY_S_RIESGO_CODIGO_FASECOLDA = "s_riesgoCodigoFasecolda";
	public static final String KEY_S_RIESGO_ZONA_CIRCULACION = "s_riesgoZonaCirculacion";
	public static final String KEY_S_RIESGO_DISPOSITIVO_RASTREO = "s_riesgoDispositivoRastreo";
	public static final String KEY_S_RIESGO_CONDUCTOR_HABITUAL = "s_riesgoConductorHabitual";
	public static final String KEY_S_RIESGO_TIEMPO_RECLAMACION = "s_riesgoTiempoReclamacion";
	public static final String KEY_S_RIESGO_SERVICIO = "s_riesgoServicio";
	public static final String KEY_S_RIESGO_INGRESOS = "s_riesgoIngresos";
	public static final String KEY_S_RIESGO_EDAD_CONDUCTOR = "s_riesgoEdadConductor";
	public static final String KEY_S_RIESGO_EGRESOS_MENSUALES = "s_riesgoEgresos";
	public static final String KEY_S_RIESGO_ACTIVOS = "s_riesgoActivos";
	public static final String KEY_S_RIESGO_PASIVOS = "s_riesgoPasivos";
	public static final String KEY_S_RIESGO_OTROS_INGRESOS = "s_riesgoOtrosIngresos";
	public static final String KEY_S_RIESGO_CONCEPTO_OTROS_INGRESOS = "s_riesgoConceptoOtrosIngresos";
	
	public static final String KEY_S_QUESTION_RECURSOS_PUBLICOS = "s_compQuestionRecursosPublicos";
	public static final String KEY_S_QUESTION_PODER_PUBLICO = "s_compQuestionPoderPublic";
	public static final String KEY_S_QUESTION_RECONOCIMIENTO_PUBLICO = "s_compQuestionReconocimientoPublico";
	public static final String KEY_S_QUESTION_OBLIGACIONES_TRIBUTARIAS = "s_compQuestionObligacionesTributarias";
	public static final String KEY_S_QUESTION_CONOCE_PERSONAS_PUBLICAS = "s_compQuestionConocePersonasPublicas";
	public static final String KEY_S_QUESTION_ESPECIFIQUE = "s_compQuestionEspecifique";
	
	public static final String KEY_S_OPERACIONES_TITLE = "s_compOperacionesTitle";
	public static final String KEY_S_OPERACIONES_MONEDA = "s_compOperacionesMoneda";
	public static final String KEY_S_OPERACIONES_MONEDA_CUAL = "s_compOperacionesMonedaCual";
	public static final String KEY_S_OPERACIONES_PRODUCTOS = "s_compOperacionesProductos";
	public static final String KEY_S_OPERACIONES_OTRA = "s_compOperacionesOtra";
	public static final String KEY_S_OPERACIONES_OTRA_CUAL = "s_compOperacionesOtraCual";
	
	public static final String KEY_S_PRODUCTO_TIPO = "s_compProductoTipo";
	public static final String KEY_S_PRODUCTO_ID = "s_compProductoId";
	public static final String KEY_S_PRODUCTO_ENTIDAD = "s_compProductoEntidad";
	public static final String KEY_S_PRODUCTO_MONTO = "s_compProductoMonto";
	public static final String KEY_S_PRODUCTO_PAIS = "s_compProductoPais";
	public static final String KEY_S_PRODUCTO_MONEDA = "s_compProductoMoneda";
	
	public static final String KEY_S_PAGO_FORMA = "s_compPagoForm";
	public static final String KEY_S_PAGO_AUTORIZO = "s_compPagoAutorizo";
	public static final String KEY_S_PAGO_TIPO_TARJETA = "s_compPagoTipoTarjeta";
	public static final String KEY_S_PAGO_COSTO = "s_compPagoCosto";
	public static final String KEY_S_PAGO_CUOTAS = "s_compPagoCuotas";
	public static final String KEY_S_PAGO_FRANQUICIA = "s_compPagoFranquicia";
	public static final String KEY_S_PAGO_TEXTO = "s_compPagoTexto";
	
	public static final String KEY_S_VALORES_PRIMA_MENSUAL = "s_compValoresPrimaMensual";
	public static final String KEY_S_VALORES_NUMERO_TARJETA = "s_compValoresNumeroTarjeta";
	public static final String KEY_S_VALORES_PRIMA_ANUAL = "s_compValoresPrimaAnual";
	public static final String KEY_S_VALORES_TITULAR_TARJETA = "s_compValoresTitularTarjeta";
	
	public static final String KEY_S_VENDEDOR_TEXT = "s_compVendedorText";
	public static final String KEY_S_VENDEDOR_CODIGO = "s_compVendedorCodigo";
	public static final String KEY_S_VENDEDOR_NOMBRE = "s_compVendedorNombre";
	
	public static final String KEY_S_FIRMA_EMPRESA = "s_firmaEmpresa";
	public static final String KEY_S_FIRMA_TOMADOR = "s_firmaTomador";
	public static final String KEY_S_FIRMA_TARJETA = "s_firmaTarjeta";
	public static final String KEY_S_FIRMA_ASEGURADO = "s_firmaAsegurado";
	public static final String KEY_S_FIRMA_HUELLA = "s_firmaHuella";
	
	public static final String KEY_S_REPORT_TITLE = "s_tituloReporte";
	public static final String KEY_S_REPORT_SUBTITULO_TABLA_2 = "s_subtituloTabla2";
	
	
	/**
	 * Método que retorna el título general del encabezado
	 * @return Cadena con el titulo del archivo
	 */
	protected String getGeneralTitle(){
		return (String)parameters.get(KEY_S_REPORT_TITLE);
	}
	
	/**
	 * Metodo que gestiona las partes que deben ser agregadas al pdf
	 * @param document Documento al que se agregarán los elementos del reporte
	 * @throws DocumentException Si se presenta un error al agregar un elemento al documento
	 * @throws IOException 
	 * @throws MalformedURLException 
	 * @throws ParseException 
	 */
	@Override
	protected void addInfoToDocument(Document document) throws DocumentException, MalformedURLException, IOException, ParseException{
		document.newPage();
		buildInsuranceInfo(document);
		buildInsuredDivided(document);
		buildInsuredSubtitle(document);
		buildInsuredInfo(document);
		buildRiskInfo(document);
		buildQuestionsTable(document);
		buildOperacionesInterInfo(document);
		buildTexts(document);
		buildOperacionesValores(document);
		buildSignature(document);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 * @throws DocumentException 
	 */
	protected void buildInsuredSubtitle(Document document) throws DocumentException{
		PdfPTable table = new PdfPTable(1);
		table.getDefaultCell().setBorder(0);
		table.setWidthPercentage(100);
		table.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		table.setSpacingAfter(DEFAULT_SPACE_BETWEEN_TABLES);
		addDefaultLabelCell((String)parameters.get(KEY_S_REPORT_SUBTITULO_TABLA_2), table);
		document.add(table);
	}
	
	/**
	 * Método que construye la tabla con la información del asegurado
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildInsuredInfo(Document document) throws DocumentException{
		PdfPTable insuredTable = new PdfPTable(1);
		insuredTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		insuredTable.setWidthPercentage(100);
		insuredTable.setKeepTogether(true);
		
		insuredTable.addCell(getInsuredTable1());
		insuredTable.addCell(getInsuredTable2());
		insuredTable.addCell(getInsuredTable2B());
		insuredTable.addCell(getInsuredTable3());
		document.add(insuredTable);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 * @throws DocumentException 
	 */
	protected void buildInsuredDivided(Document document) throws DocumentException{
		PdfPTable tableOutter = new PdfPTable(1);
		tableOutter.getDefaultCell().setBorder(1);
		tableOutter.setWidthPercentage(100);
		tableOutter.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		tableOutter.setSpacingAfter(DEFAULT_SPACE_BETWEEN_TABLES);
		
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_NAME), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_NIT), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_NIT), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_TEL2), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_TEL2), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_CIUDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_CIUDAD), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_DIRECCION), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_DIRECCION), table);
		addDefaultLabelCell(util.getMessage(KEY_ASEGURADORA_TOMADOR_CORREO), table);
		addDefaultTextCell((String)parameters.get(KEY_ASEGURADORA_TOMADOR_CORREO), table);
		table.completeRow();
		
		tableOutter.addCell(new PdfPCell(new Paragraph("DATOS DEL TOMADOR", font8BlackBold)));
		tableOutter.addCell(getTableAsCell(table));
		document.add(tableOutter);
	}
	

	/**
	 * Método que construye la segunda parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 */
	@Override
	protected PdfPCell getInsuredTable2(){
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_NAME), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_NAME), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_TIPO_DOCUMENT), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_TIPO_DOCUMENT), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_NUM_DOCUMENTO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_NUM_DOCUMENTO), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_SEXO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_SEXO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_ESTADO_CIVIL), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_ESTADO_CIVIL), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_FECHA_NACIMIENTO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_FECHA_NACIMIENTO), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_DIRECCION), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_DIRECCION), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_TELEFONO1), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_TELEFONO1), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_TELEFONO2), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_TELEFONO2), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_CIUDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_CIUDAD), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_LUGAR_NACIMIENTO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_LUGAR_NACIMIENTO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_NACIONALIDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_NACIONALIDAD), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_EDAD), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_EDAD), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_EMAIL), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_EMAIL), table);
		table.completeRow();
		
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información del asegurado
	 * @return Una tabla con la información del asegurado
	 */
	protected PdfPCell getInsuredTable2B(){
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_ACTIVIDAD_ECONOMICA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_ACTIVIDAD_ECONOMICA), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_PROFESION), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_PROFESION), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_NOMBRE_EMPRESA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_NOMBRE_EMPRESA), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_OCUPACION), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_OCUPACION), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_DIRECCION_EMPRESA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_DIRECCION_EMPRESA), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_DEFINIR_CARGO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_DEFINIR_CARGO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_CIUDAD_CARGO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_CIUDAD_CARGO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_ASEGURADO_TELEFONO_CARGO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_ASEGURADO_TELEFONO_CARGO), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	
	/**
	 * Método que construye la tabla con la información del riesgo
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildRiskInfo(Document document) throws DocumentException{
		PdfPTable riskTable = new PdfPTable(1);
		riskTable.setWidthPercentage(100);
		riskTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		riskTable.setKeepTogether(true);
		riskTable.addCell(getRiskTableTitle(KEY_RIESGO_TITULO));
		riskTable.addCell(getRiskTableComplement1());
		riskTable.addCell(getRiskTableComplement2());
		riskTable.addCell(getRiskTable2());
		
		riskTable.addCell(getRiskTableTitle(KEY_RIESGO_INFO));
		riskTable.addCell(getRiskTable3());
		document.add(riskTable);
	}
	
	/**
	 * Método que construye la primera parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	@Override
	protected PdfPCell getRiskTableTitle(String title){
		PdfPTable table = new PdfPTable(1);
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(title), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	private PdfPCell getRiskTableComplement1(){
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_CONDUCTOR_HABITUAL), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_CONDUCTOR_HABITUAL), table);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_ZONA_CIRCULACION), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_ZONA_CIRCULACION), table);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_SERVICIO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_SERVICIO), table);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	private PdfPCell getRiskTableComplement2(){
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_INGRESOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_INGRESOS), table);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_EGRESOS_MENSUALES), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_EGRESOS_MENSUALES), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_ACTIVOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_ACTIVOS), table);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_PASIVOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_PASIVOS), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_OTROS_INGRESOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_OTROS_INGRESOS), table);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_CONCEPTO_OTROS_INGRESOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_CONCEPTO_OTROS_INGRESOS), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	@Override
	protected PdfPCell getRiskTable2(){
		PdfPTable table = new PdfPTable(new float[]{3, 10, 4, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_BIEN), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_BIEN), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 */
	protected PdfPCell getRiskTable3(){
		PdfPTable table = new PdfPTable(new float[]{9.5f, 15, 8, 10, 6, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_SERIE_CHASIS), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_SERIE_CHASIS), table);
		addDefaultLabelCell(util.getMessage(KEY_S_RIESGO_CODIGO_FASECOLDA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_RIESGO_CODIGO_FASECOLDA), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_CLASE), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_CLASE), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_MODELO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_MODELO), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_MARCA), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_MARCA), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_VALOR), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_VALOR), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_TIPO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_TIPO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_PLACA), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_PLACA), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_SERIE_MOTOR), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_SERIE_MOTOR), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_COLOR), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_COLOR), table);
		table.completeRow();
		
//		addDefaultLabelCell(util.getMessage(KEY_RIESGO_ONEROSO), table);
//		addDefaultTextCell((String)parameters.get(KEY_RIESGO_ONEROSO), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_RECLAMACION), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_RECLAMACION), table);
		table.completeRow();
//		addDefaultLabelCell(util.getMessage(KEY_RIESGO_FECHA_NAC), table);
//		addDefaultTextCell((String)parameters.get(KEY_RIESGO_FECHA_NAC), table);
		addDefaultLabelCell(util.getMessage(KEY_RIESGO_NUEVO), table);
		addDefaultTextCell((String)parameters.get(KEY_RIESGO_NUEVO), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información del riesgo
	 * @return Una tabla con la información del riesgo
	 * @throws DocumentException 
	 */
	protected void buildQuestionsTable(Document document) throws DocumentException{
		PdfPTable table = new PdfPTable(new float[]{10, 4, 10, 4});
		table.getDefaultCell().setBorderWidth(0);
		table.setWidthPercentage(100);
		table.setKeepTogether(true);
		
		addDefaultLabelCell(util.getMessage(KEY_S_QUESTION_RECURSOS_PUBLICOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_QUESTION_RECURSOS_PUBLICOS), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_QUESTION_PODER_PUBLICO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_QUESTION_PODER_PUBLICO), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_QUESTION_RECONOCIMIENTO_PUBLICO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_QUESTION_RECONOCIMIENTO_PUBLICO), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_QUESTION_OBLIGACIONES_TRIBUTARIAS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_QUESTION_OBLIGACIONES_TRIBUTARIAS), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_QUESTION_CONOCE_PERSONAS_PUBLICAS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_QUESTION_CONOCE_PERSONAS_PUBLICAS), table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_QUESTION_ESPECIFIQUE), table);
		PdfPCell cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_QUESTION_ESPECIFIQUE), font8BlackRegular));
		cell.setBorder(0); cell.setColspan(3);
		table.addCell(cell);
		
		PdfPTable tableWrapper = new PdfPTable(1);
		tableWrapper.getDefaultCell().setBorderWidth(0.5f);
		tableWrapper.getDefaultCell().setBorderColor(defaultTableBorderBaseColor);
		tableWrapper.setWidthPercentage(100);
		tableWrapper.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		tableWrapper.addCell(getTableAsCell(table));
		document.add(tableWrapper);
	}
	
	/**
	 * Método que construye la tabla con la información del riesgo
	 * @param document Objeto al que será agregada la información
	 * @throws DocumentException
	 */
	protected void buildOperacionesInterInfo(Document document) throws DocumentException{
		PdfPTable operacionesTable = new PdfPTable(1);
		operacionesTable.setWidthPercentage(100);
		operacionesTable.setSpacingBefore(DEFAULT_SPACE_BETWEEN_TABLES);
		operacionesTable.setKeepTogether(true);
		
		operacionesTable.addCell(getOperacionesInterTitle());
		operacionesTable.addCell(getOperacionesInterInfo());
		operacionesTable.addCell(getOperacionesInterProduct());
		operacionesTable.addCell(getOperacionesFormaPago());
		operacionesTable.addCell(getOperacionesValores());
		document.add(operacionesTable);
	}
	
	/**
	 * Método que construye la segunda parte de la tabla con la información de las operaciones internacionales
	 * @return Una tabla con la información del riesgo
	 */
	protected PdfPCell getOperacionesInterTitle(){
		PdfPTable table = new PdfPTable(1);
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_S_OPERACIONES_TITLE), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información de los tomadores
	 * @return Una tabla con la información de los tomadores
	 */
	protected PdfPCell getOperacionesInterInfo(){
		PdfPTable table = new PdfPTable(new float[]{10, 5, 3, 5, 4, 5});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_S_OPERACIONES_MONEDA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_OPERACIONES_MONEDA), table);
		addDefaultLabelCell(util.getMessage(KEY_S_OPERACIONES_MONEDA_CUAL), table);
		addDefaultTextCell((String)parameters.get(KEY_S_OPERACIONES_MONEDA_CUAL), table);
		table.completeRow();
		
		addDefaultLabelCell(util.getMessage(KEY_S_OPERACIONES_PRODUCTOS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_OPERACIONES_PRODUCTOS), table);
		addDefaultLabelCell(util.getMessage(KEY_S_OPERACIONES_OTRA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_OPERACIONES_OTRA), table);
//		addDefaultLabelCell(util.getMessage(KEY_S_OPERACIONES_OTRA_CUAL), table);
//		addDefaultTextCell((String)parameters.get(KEY_S_OPERACIONES_OTRA_CUAL), table);
		table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información de los tomadores
	 * @return Una tabla con la información de los tomadores
	 */
	protected PdfPCell getOperacionesInterProduct(){
		PdfPTable table = new PdfPTable(new float[]{10, 8, 6, 5, 5, 5});
		table.getDefaultCell().setBorderWidth(0.25f);
		addDefaultLabelCellWithBorder(util.getMessage(KEY_S_PRODUCTO_TIPO), table);
		addDefaultLabelCellWithBorder(util.getMessage(KEY_S_PRODUCTO_ID), table);
		addDefaultLabelCellWithBorder(util.getMessage(KEY_S_PRODUCTO_ENTIDAD), table);
		addDefaultLabelCellWithBorder(util.getMessage(KEY_S_PRODUCTO_MONTO), table);
		addDefaultLabelCellWithBorder(util.getMessage(KEY_S_PRODUCTO_PAIS), table);
		addDefaultLabelCellWithBorder(util.getMessage(KEY_S_PRODUCTO_MONEDA), table);
		
		addDefaultLabelCellWithBorder((String)parameters.get(KEY_S_PRODUCTO_TIPO), table);
		addDefaultLabelCellWithBorder((String)parameters.get(KEY_S_PRODUCTO_ID), table);
		addDefaultLabelCellWithBorder((String)parameters.get(KEY_S_PRODUCTO_ENTIDAD), table);
		addDefaultLabelCellWithBorder((String)parameters.get(KEY_S_PRODUCTO_MONTO), table);
		addDefaultLabelCellWithBorder((String)parameters.get(KEY_S_PRODUCTO_PAIS), table);
		addDefaultLabelCellWithBorder((String)parameters.get(KEY_S_PRODUCTO_MONEDA), table);
		
		addDefaultLabelCellWithBorder(" ", table); table.completeRow();
		addDefaultLabelCellWithBorder(" ", table); table.completeRow();
		addDefaultLabelCellWithBorder(" ", table); table.completeRow();
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información de los tomadores
	 * @return Una tabla con la información de los tomadores
	 */
	protected PdfPCell getOperacionesFormaPago(){
		PdfPTable table = new PdfPTable(new float[]{5, 5, 10, 10});
		table.getDefaultCell().setBorder(0);
		addDefaultLabelCell(util.getMessage(KEY_S_PAGO_FORMA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_PAGO_FORMA), table);
		addDefaultLabelCell(util.getMessage(KEY_S_PAGO_AUTORIZO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_PAGO_AUTORIZO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_PAGO_COSTO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_PAGO_COSTO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_PAGO_CUOTAS), table);
		addDefaultTextCell((String)parameters.get(KEY_S_PAGO_CUOTAS), table);
		addDefaultLabelCell(util.getMessage(KEY_S_PAGO_TIPO_TARJETA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_PAGO_TIPO_TARJETA), table);
		addDefaultLabelCell(util.getMessage(KEY_S_PAGO_FRANQUICIA), table);
		addDefaultTextCell((String)parameters.get(KEY_S_PAGO_FRANQUICIA), table);
		
		PdfPCell cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_PAGO_TEXTO), font8BlackRegular));
		cell.setBorder(0); cell.setColspan(2);
		table.addCell(cell);
		return getTableAsCell(table);
	}
	
	/**
	 * Método que construye la tercera parte de la tabla con la información de los tomadores
	 * @return Una tabla con la información de los tomadores
	 */
	protected PdfPCell getOperacionesValores(){
		PdfPTable table = new PdfPTable(new float[]{8, 5, 5, 5, 5, 5});
		table.getDefaultCell().setBorder(0);
		
		addDefaultLabelCell(util.getMessage(KEY_S_VALORES_PRIMA_MENSUAL), table);
		PdfPCell cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_VALORES_PRIMA_MENSUAL), font8BlackRegular));
		cell.setBorder(0);cell.setBorderWidthBottom(0.25f); table.addCell(cell);
		addDefaultLabelCell(StringUtils.EMPTY, table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_VALORES_NUMERO_TARJETA), table);
		cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_VALORES_NUMERO_TARJETA), font8BlackRegular));
		cell.setBorder(0);cell.setBorderWidthBottom(0.25f); table.addCell(cell);
		addDefaultLabelCell(StringUtils.EMPTY, table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_VALORES_PRIMA_ANUAL), table);
		cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_VALORES_PRIMA_ANUAL), font8BlackRegular));
		cell.setBorder(0);cell.setBorderWidthBottom(0.25f); table.addCell(cell);
		addDefaultLabelCell(StringUtils.EMPTY, table);
		
		addDefaultLabelCell(util.getMessage(KEY_S_VALORES_TITULAR_TARJETA), table);
		cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_VALORES_TITULAR_TARJETA), font8BlackRegular));
		cell.setBorder(0);cell.setBorderWidthBottom(0.25f); table.addCell(cell);
		addDefaultLabelCell(StringUtils.EMPTY, table);
		
		addDefaultLabelCell(StringUtils.EMPTY, table); table.completeRow();
		return getTableAsCell(table);
	}
	
	
	protected void buildOperacionesValores(Document document ) throws DocumentException{
		PdfPTable table = new PdfPTable(new float[]{2,10});
		table.getDefaultCell().setBorder(0);
		table.setWidthPercentage(100);
		table.setKeepTogether(true);
		table.setSpacingBefore(10);
		
		PdfPCell cell = new PdfPCell(new Paragraph((String)parameters.get(KEY_S_VENDEDOR_TEXT), font8BlackBold));
		cell.setBorder(0); cell.setColspan(2);
		table.addCell(cell);
		
		addDefaultLabelCell(util.getMessage(KEY_S_VENDEDOR_CODIGO), table);
		addDefaultTextCell((String)parameters.get(KEY_S_VENDEDOR_CODIGO), table);
		addDefaultLabelCell(util.getMessage(KEY_S_VENDEDOR_NOMBRE), table);
		addDefaultTextCell((String)parameters.get(KEY_S_VENDEDOR_NOMBRE), table);
		document.add(table);
	}
	
	@Override
	protected void buildSignature(Document document) throws DocumentException, MalformedURLException, IOException{
//		Image companySignature = Image.getInstance((byte[])parameters.get(KEY_FIRMA_EMPRESA));
		PdfPTable table = new PdfPTable(new float[]{10, 2, 10, 2, 10, 2, 10, 2, 10});
		table.getDefaultCell().setBorder(0);
		table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		table.setWidthPercentage(90);
		PdfPCell cell;
		
		PdfPTable innerTable = new PdfPTable(1);
		innerTable.setWidthPercentage(90);
		innerTable.addCell("\n\n\n\n\n\n\n\n");
		
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(innerTable);
		
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);
		table.addCell(StringUtils.EMPTY);table.addCell(StringUtils.EMPTY);

		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_S_FIRMA_TOMADOR), font8BlackBold));
		cell.setBorder(0); cell.setBorderWidthTop(0.5f);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell); table.addCell(StringUtils.EMPTY);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_S_FIRMA_ASEGURADO), font8BlackBold));
		cell.setBorder(0); cell.setBorderWidthTop(0.5f);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell); table.addCell(StringUtils.EMPTY);
		
		cell = new PdfPCell(new Paragraph(util.getMessage(KEY_S_FIRMA_HUELLA), font8BlackBold));
		cell.setBorder(0); cell.setBorderWidthTop(0.5f);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		document.add(table);
	}
}